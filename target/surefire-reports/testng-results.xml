<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="8" total="12" passed="2" failed="2" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2019-12-04T06:47:11Z" name="Suite" finished-at="2019-12-04T06:47:54Z" duration-ms="43640">
    <groups>
      <group name="smoke">
        <method signature="TC1.step1(java.lang.reflect.Method)[pri:0, instance:TestCases.TC1@6b1274d2]" name="step1" class="TestCases.TC1"/>
        <method signature="TC2.step1(java.lang.reflect.Method)[pri:0, instance:TestCases.TC2@525b461a]" name="step1" class="TestCases.TC2"/>
        <method signature="TC1.step1(java.lang.reflect.Method)[pri:0, instance:TestCases.TC1@57175e74]" name="step1" class="TestCases.TC1"/>
        <method signature="TC2.step1(java.lang.reflect.Method)[pri:0, instance:TestCases.TC2@7bb58ca3]" name="step1" class="TestCases.TC2"/>
      </group> <!-- smoke -->
    </groups>
    <test started-at="2019-12-04T06:47:11Z" name="IETest" finished-at="2019-12-04T06:47:47Z" duration-ms="36391">
      <class name="TestCases.TC2">
        <test-method is-config="true" signature="beforeClass(org.testng.ITestContext)[pri:0, instance:TestCases.TC2@7bb58ca3]" started-at="2019-12-04T06:47:32Z" name="beforeClass" finished-at="2019-12-04T06:47:32Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.testng.TestRunner@76505305]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="setupMetod(java.lang.reflect.Method, java.lang.String)[pri:0, instance:TestCases.TC2@7bb58ca3]" started-at="2019-12-04T06:47:32Z" name="setupMetod" finished-at="2019-12-04T06:47:46Z" duration-ms="13599" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void TestCases.TC2.step1(java.lang.reflect.Method)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[IE]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupMetod -->
        <test-method signature="step1(java.lang.reflect.Method)[pri:0, instance:TestCases.TC2@7bb58ca3]" started-at="2019-12-04T06:47:46Z" name="step1" finished-at="2019-12-04T06:47:46Z" duration-ms="4" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void TestCases.TC2.step1(java.lang.reflect.Method)]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [false] but found [true]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [false] but found [true]
at org.testng.Assert.fail(Assert.java:96)
at org.testng.Assert.failNotEquals(Assert.java:776)
at org.testng.Assert.assertEqualsImpl(Assert.java:137)
at org.testng.Assert.assertEquals(Assert.java:118)
at org.testng.Assert.assertEquals(Assert.java:568)
at org.testng.Assert.assertEquals(Assert.java:578)
at TestCases.TC2.step1(TC2.java:19)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:567)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:40)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:489)
at org.testng.internal.thread.ThreadUtil$1.call(ThreadUtil.java:52)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
at java.base/java.lang.Thread.run(Thread.java:835)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- step1 -->
        <test-method is-config="true" signature="teardownMetod(org.testng.ITestResult)[pri:0, instance:TestCases.TC2@7bb58ca3]" started-at="2019-12-04T06:47:46Z" name="teardownMetod" finished-at="2019-12-04T06:47:47Z" duration-ms="899" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=step1 status=FAILURE method=TC2.step1(java.lang.reflect.Method)[pri:0, instance:TestCases.TC2@7bb58ca3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardownMetod -->
        <test-method is-config="true" signature="flushReport()[pri:0, instance:TestCases.TC2@7bb58ca3]" started-at="2019-12-04T06:47:47Z" name="flushReport" finished-at="2019-12-04T06:47:47Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- flushReport -->
      </class> <!-- TestCases.TC2 -->
      <class name="TestCases.TC1">
        <test-method is-config="true" signature="extentReportSetup()[pri:0, instance:TestCases.TC1@57175e74]" started-at="2019-12-04T06:47:10Z" name="extentReportSetup" description="test" finished-at="2019-12-04T06:47:11Z" duration-ms="281" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- extentReportSetup -->
        <test-method is-config="true" signature="beforeClass(org.testng.ITestContext)[pri:0, instance:TestCases.TC1@57175e74]" started-at="2019-12-04T06:47:11Z" name="beforeClass" finished-at="2019-12-04T06:47:11Z" duration-ms="31" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.testng.TestRunner@76505305]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="setupMetod(java.lang.reflect.Method, java.lang.String)[pri:0, instance:TestCases.TC1@57175e74]" started-at="2019-12-04T06:47:11Z" name="setupMetod" finished-at="2019-12-04T06:47:32Z" duration-ms="20880" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void TestCases.TC1.step1(java.lang.reflect.Method)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[IE]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupMetod -->
        <test-method signature="step1(java.lang.reflect.Method)[pri:0, instance:TestCases.TC1@57175e74]" started-at="2019-12-04T06:47:32Z" name="step1" finished-at="2019-12-04T06:47:32Z" duration-ms="78" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void TestCases.TC1.step1(java.lang.reflect.Method)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- step1 -->
        <test-method is-config="true" signature="teardownMetod(org.testng.ITestResult)[pri:0, instance:TestCases.TC1@57175e74]" started-at="2019-12-04T06:47:32Z" name="teardownMetod" finished-at="2019-12-04T06:47:32Z" duration-ms="328" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=step1 status=SUCCESS method=TC1.step1(java.lang.reflect.Method)[pri:0, instance:TestCases.TC1@57175e74] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardownMetod -->
        <test-method is-config="true" signature="flushReport()[pri:0, instance:TestCases.TC1@57175e74]" started-at="2019-12-04T06:47:32Z" name="flushReport" finished-at="2019-12-04T06:47:32Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- flushReport -->
        <test-method is-config="true" signature="teardownTest()[pri:0, instance:TestCases.TC1@57175e74]" started-at="2019-12-04T06:47:47Z" name="teardownTest" finished-at="2019-12-04T06:47:47Z" duration-ms="524" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardownTest -->
      </class> <!-- TestCases.TC1 -->
    </test> <!-- IETest -->
    <test started-at="2019-12-04T06:47:11Z" name="CHTest" finished-at="2019-12-04T06:47:54Z" duration-ms="43640">
      <class name="TestCases.TC2">
        <test-method is-config="true" signature="setupMetod(java.lang.reflect.Method, java.lang.String)[pri:0, instance:TestCases.TC2@525b461a]" started-at="2019-12-04T06:47:33Z" name="setupMetod" finished-at="2019-12-04T06:47:46Z" duration-ms="12953" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void TestCases.TC2.step1(java.lang.reflect.Method)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[ch]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupMetod -->
        <test-method is-config="true" signature="beforeClass(org.testng.ITestContext)[pri:0, instance:TestCases.TC2@525b461a]" started-at="2019-12-04T06:47:33Z" name="beforeClass" finished-at="2019-12-04T06:47:33Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.testng.TestRunner@71d44a3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="teardownMetod(org.testng.ITestResult)[pri:0, instance:TestCases.TC2@525b461a]" started-at="2019-12-04T06:47:46Z" name="teardownMetod" finished-at="2019-12-04T06:47:54Z" duration-ms="8024" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=step1 status=FAILURE method=TC2.step1(java.lang.reflect.Method)[pri:0, instance:TestCases.TC2@525b461a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardownMetod -->
        <test-method signature="step1(java.lang.reflect.Method)[pri:0, instance:TestCases.TC2@525b461a]" started-at="2019-12-04T06:47:46Z" name="step1" finished-at="2019-12-04T06:47:46Z" duration-ms="0" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void TestCases.TC2.step1(java.lang.reflect.Method)]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [false] but found [true]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [false] but found [true]
at org.testng.Assert.fail(Assert.java:96)
at org.testng.Assert.failNotEquals(Assert.java:776)
at org.testng.Assert.assertEqualsImpl(Assert.java:137)
at org.testng.Assert.assertEquals(Assert.java:118)
at org.testng.Assert.assertEquals(Assert.java:568)
at org.testng.Assert.assertEquals(Assert.java:578)
at TestCases.TC2.step1(TC2.java:19)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:567)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:40)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:489)
at org.testng.internal.thread.ThreadUtil$1.call(ThreadUtil.java:52)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
at java.base/java.lang.Thread.run(Thread.java:835)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- step1 -->
        <test-method is-config="true" signature="flushReport()[pri:0, instance:TestCases.TC2@525b461a]" started-at="2019-12-04T06:47:54Z" name="flushReport" finished-at="2019-12-04T06:47:54Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- flushReport -->
      </class> <!-- TestCases.TC2 -->
      <class name="TestCases.TC1">
        <test-method is-config="true" signature="beforeClass(org.testng.ITestContext)[pri:0, instance:TestCases.TC1@6b1274d2]" started-at="2019-12-04T06:47:11Z" name="beforeClass" finished-at="2019-12-04T06:47:11Z" duration-ms="31" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.testng.TestRunner@71d44a3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="setupMetod(java.lang.reflect.Method, java.lang.String)[pri:0, instance:TestCases.TC1@6b1274d2]" started-at="2019-12-04T06:47:11Z" name="setupMetod" finished-at="2019-12-04T06:47:24Z" duration-ms="13178" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void TestCases.TC1.step1(java.lang.reflect.Method)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[ch]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupMetod -->
        <test-method signature="step1(java.lang.reflect.Method)[pri:0, instance:TestCases.TC1@6b1274d2]" started-at="2019-12-04T06:47:24Z" name="step1" finished-at="2019-12-04T06:47:26Z" duration-ms="1672" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void TestCases.TC1.step1(java.lang.reflect.Method)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- step1 -->
        <test-method is-config="true" signature="teardownMetod(org.testng.ITestResult)[pri:0, instance:TestCases.TC1@6b1274d2]" started-at="2019-12-04T06:47:26Z" name="teardownMetod" finished-at="2019-12-04T06:47:33Z" duration-ms="7218" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=step1 status=SUCCESS method=TC1.step1(java.lang.reflect.Method)[pri:0, instance:TestCases.TC1@6b1274d2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardownMetod -->
        <test-method is-config="true" signature="flushReport()[pri:0, instance:TestCases.TC1@6b1274d2]" started-at="2019-12-04T06:47:33Z" name="flushReport" finished-at="2019-12-04T06:47:33Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- flushReport -->
        <test-method is-config="true" signature="teardownTest()[pri:0, instance:TestCases.TC1@6b1274d2]" started-at="2019-12-04T06:47:54Z" name="teardownTest" finished-at="2019-12-04T06:47:54Z" duration-ms="532" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardownTest -->
      </class> <!-- TestCases.TC1 -->
    </test> <!-- CHTest -->
  </suite> <!-- Suite -->
</testng-results>
